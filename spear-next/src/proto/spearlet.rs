// This file is @generated by prost-build.
/// Object metadata / 对象元数据
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ObjectMeta {
    /// Object key / 对象键
    #[prost(string, tag = "1")]
    pub key: ::prost::alloc::string::String,
    /// Object size in bytes / 对象大小（字节）
    #[prost(int64, tag = "2")]
    pub size: i64,
    /// Creation timestamp / 创建时间戳
    #[prost(int64, tag = "3")]
    pub created_at: i64,
    /// Last update timestamp / 最后更新时间戳
    #[prost(int64, tag = "4")]
    pub updated_at: i64,
    /// Reference count / 引用计数
    #[prost(int32, tag = "5")]
    pub ref_count: i32,
    /// Whether object is pinned / 对象是否被固定
    #[prost(bool, tag = "6")]
    pub pinned: bool,
    /// Additional metadata / 额外元数据
    #[prost(map = "string, string", tag = "7")]
    pub metadata: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
}
/// Object data / 对象数据
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Object {
    /// Object key / 对象键
    #[prost(string, tag = "1")]
    pub key: ::prost::alloc::string::String,
    /// Object value / 对象值
    #[prost(bytes = "vec", tag = "2")]
    pub value: ::prost::alloc::vec::Vec<u8>,
    /// Object size in bytes / 对象大小（字节）
    #[prost(int64, tag = "3")]
    pub size: i64,
    /// Creation timestamp / 创建时间戳
    #[prost(int64, tag = "4")]
    pub created_at: i64,
    /// Last update timestamp / 最后更新时间戳
    #[prost(int64, tag = "5")]
    pub updated_at: i64,
    /// Reference count / 引用计数
    #[prost(int32, tag = "6")]
    pub ref_count: i32,
    /// Whether object is pinned / 对象是否被固定
    #[prost(bool, tag = "7")]
    pub pinned: bool,
    /// Additional metadata / 额外元数据
    #[prost(map = "string, string", tag = "8")]
    pub metadata: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
}
/// Put object request / 存储对象请求
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PutObjectRequest {
    /// Object key / 对象键
    #[prost(string, tag = "1")]
    pub key: ::prost::alloc::string::String,
    /// Object value / 对象值
    #[prost(bytes = "vec", tag = "2")]
    pub value: ::prost::alloc::vec::Vec<u8>,
    /// Object metadata / 对象元数据
    #[prost(map = "string, string", tag = "3")]
    pub metadata: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
    /// Whether to overwrite existing object / 是否覆盖现有对象
    #[prost(bool, tag = "4")]
    pub overwrite: bool,
}
/// Put object response / 存储对象响应
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PutObjectResponse {
    /// Operation success / 操作成功
    #[prost(bool, tag = "1")]
    pub success: bool,
    /// Response message / 响应消息
    #[prost(string, tag = "2")]
    pub message: ::prost::alloc::string::String,
    /// Object metadata / 对象元数据
    #[prost(message, optional, tag = "3")]
    pub object_meta: ::core::option::Option<ObjectMeta>,
}
/// Get object request / 获取对象请求
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetObjectRequest {
    /// Object key / 对象键
    #[prost(string, tag = "1")]
    pub key: ::prost::alloc::string::String,
    /// Whether to include object value / 是否包含对象值
    #[prost(bool, tag = "2")]
    pub include_value: bool,
}
/// Get object response / 获取对象响应
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetObjectResponse {
    /// Whether object was found / 是否找到对象
    #[prost(bool, tag = "1")]
    pub found: bool,
    /// Object data (if found) / 对象数据（如果找到）
    #[prost(message, optional, tag = "2")]
    pub object: ::core::option::Option<Object>,
    /// Response message / 响应消息
    #[prost(string, tag = "3")]
    pub message: ::prost::alloc::string::String,
}
/// List objects request / 列出对象请求
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListObjectsRequest {
    /// Key prefix filter / 键前缀过滤器
    #[prost(string, tag = "1")]
    pub prefix: ::prost::alloc::string::String,
    /// Maximum number of objects to return / 返回对象的最大数量
    #[prost(int32, tag = "2")]
    pub limit: i32,
    /// Start listing after this key / 在此键之后开始列出
    #[prost(string, tag = "3")]
    pub start_after: ::prost::alloc::string::String,
    /// Whether to include object values / 是否包含对象值
    #[prost(bool, tag = "4")]
    pub include_values: bool,
}
/// List objects response / 列出对象响应
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListObjectsResponse {
    /// List of objects / 对象列表
    #[prost(message, repeated, tag = "1")]
    pub objects: ::prost::alloc::vec::Vec<Object>,
    /// Whether there are more objects / 是否还有更多对象
    #[prost(bool, tag = "2")]
    pub has_more: bool,
    /// Next start_after value for pagination / 分页的下一个start_after值
    #[prost(string, tag = "3")]
    pub next_start_after: ::prost::alloc::string::String,
}
/// Add object reference request / 添加对象引用请求
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AddObjectRefRequest {
    /// Object key / 对象键
    #[prost(string, tag = "1")]
    pub key: ::prost::alloc::string::String,
    /// Number of references to add / 要添加的引用数量
    #[prost(int32, tag = "2")]
    pub count: i32,
}
/// Add object reference response / 添加对象引用响应
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AddObjectRefResponse {
    /// Operation success / 操作成功
    #[prost(bool, tag = "1")]
    pub success: bool,
    /// Response message / 响应消息
    #[prost(string, tag = "2")]
    pub message: ::prost::alloc::string::String,
    /// New reference count / 新的引用计数
    #[prost(int32, tag = "3")]
    pub new_ref_count: i32,
}
/// Remove object reference request / 移除对象引用请求
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RemoveObjectRefRequest {
    /// Object key / 对象键
    #[prost(string, tag = "1")]
    pub key: ::prost::alloc::string::String,
    /// Number of references to remove / 要移除的引用数量
    #[prost(int32, tag = "2")]
    pub count: i32,
}
/// Remove object reference response / 移除对象引用响应
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RemoveObjectRefResponse {
    /// Operation success / 操作成功
    #[prost(bool, tag = "1")]
    pub success: bool,
    /// Response message / 响应消息
    #[prost(string, tag = "2")]
    pub message: ::prost::alloc::string::String,
    /// New reference count / 新的引用计数
    #[prost(int32, tag = "3")]
    pub new_ref_count: i32,
    /// Whether object was deleted due to zero refs / 是否因引用为零而删除对象
    #[prost(bool, tag = "4")]
    pub deleted: bool,
}
/// Pin object request / 固定对象请求
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PinObjectRequest {
    /// Object key / 对象键
    #[prost(string, tag = "1")]
    pub key: ::prost::alloc::string::String,
}
/// Pin object response / 固定对象响应
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PinObjectResponse {
    /// Operation success / 操作成功
    #[prost(bool, tag = "1")]
    pub success: bool,
    /// Response message / 响应消息
    #[prost(string, tag = "2")]
    pub message: ::prost::alloc::string::String,
}
/// Unpin object request / 取消固定对象请求
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UnpinObjectRequest {
    /// Object key / 对象键
    #[prost(string, tag = "1")]
    pub key: ::prost::alloc::string::String,
}
/// Unpin object response / 取消固定对象响应
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UnpinObjectResponse {
    /// Operation success / 操作成功
    #[prost(bool, tag = "1")]
    pub success: bool,
    /// Response message / 响应消息
    #[prost(string, tag = "2")]
    pub message: ::prost::alloc::string::String,
}
/// Delete object request / 删除对象请求
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DeleteObjectRequest {
    /// Object key / 对象键
    #[prost(string, tag = "1")]
    pub key: ::prost::alloc::string::String,
    /// Force delete even if pinned / 即使被固定也强制删除
    #[prost(bool, tag = "2")]
    pub force: bool,
}
/// Delete object response / 删除对象响应
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DeleteObjectResponse {
    /// Operation success / 操作成功
    #[prost(bool, tag = "1")]
    pub success: bool,
    /// Response message / 响应消息
    #[prost(string, tag = "2")]
    pub message: ::prost::alloc::string::String,
    /// Whether object was actually deleted / 对象是否实际被删除
    #[prost(bool, tag = "3")]
    pub deleted: bool,
}
/// Generated client implementations.
pub mod object_service_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    /// Object service definition / 对象服务定义
    #[derive(Debug, Clone)]
    pub struct ObjectServiceClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl ObjectServiceClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> ObjectServiceClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> ObjectServiceClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            ObjectServiceClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// Store an object / 存储对象
        pub async fn put_object(
            &mut self,
            request: impl tonic::IntoRequest<super::PutObjectRequest>,
        ) -> std::result::Result<
            tonic::Response<super::PutObjectResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/spearlet.ObjectService/PutObject",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("spearlet.ObjectService", "PutObject"));
            self.inner.unary(req, path, codec).await
        }
        /// Retrieve an object / 检索对象
        pub async fn get_object(
            &mut self,
            request: impl tonic::IntoRequest<super::GetObjectRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetObjectResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/spearlet.ObjectService/GetObject",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("spearlet.ObjectService", "GetObject"));
            self.inner.unary(req, path, codec).await
        }
        /// List objects / 列出对象
        pub async fn list_objects(
            &mut self,
            request: impl tonic::IntoRequest<super::ListObjectsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ListObjectsResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/spearlet.ObjectService/ListObjects",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("spearlet.ObjectService", "ListObjects"));
            self.inner.unary(req, path, codec).await
        }
        /// Add object reference / 添加对象引用
        pub async fn add_object_ref(
            &mut self,
            request: impl tonic::IntoRequest<super::AddObjectRefRequest>,
        ) -> std::result::Result<
            tonic::Response<super::AddObjectRefResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/spearlet.ObjectService/AddObjectRef",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("spearlet.ObjectService", "AddObjectRef"));
            self.inner.unary(req, path, codec).await
        }
        /// Remove object reference / 移除对象引用
        pub async fn remove_object_ref(
            &mut self,
            request: impl tonic::IntoRequest<super::RemoveObjectRefRequest>,
        ) -> std::result::Result<
            tonic::Response<super::RemoveObjectRefResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/spearlet.ObjectService/RemoveObjectRef",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("spearlet.ObjectService", "RemoveObjectRef"));
            self.inner.unary(req, path, codec).await
        }
        /// Pin object (prevent deletion) / 固定对象（防止删除）
        pub async fn pin_object(
            &mut self,
            request: impl tonic::IntoRequest<super::PinObjectRequest>,
        ) -> std::result::Result<
            tonic::Response<super::PinObjectResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/spearlet.ObjectService/PinObject",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("spearlet.ObjectService", "PinObject"));
            self.inner.unary(req, path, codec).await
        }
        /// Unpin object / 取消固定对象
        pub async fn unpin_object(
            &mut self,
            request: impl tonic::IntoRequest<super::UnpinObjectRequest>,
        ) -> std::result::Result<
            tonic::Response<super::UnpinObjectResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/spearlet.ObjectService/UnpinObject",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("spearlet.ObjectService", "UnpinObject"));
            self.inner.unary(req, path, codec).await
        }
        /// Delete object / 删除对象
        pub async fn delete_object(
            &mut self,
            request: impl tonic::IntoRequest<super::DeleteObjectRequest>,
        ) -> std::result::Result<
            tonic::Response<super::DeleteObjectResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/spearlet.ObjectService/DeleteObject",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("spearlet.ObjectService", "DeleteObject"));
            self.inner.unary(req, path, codec).await
        }
    }
}
/// Generated server implementations.
pub mod object_service_server {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with ObjectServiceServer.
    #[async_trait]
    pub trait ObjectService: std::marker::Send + std::marker::Sync + 'static {
        /// Store an object / 存储对象
        async fn put_object(
            &self,
            request: tonic::Request<super::PutObjectRequest>,
        ) -> std::result::Result<
            tonic::Response<super::PutObjectResponse>,
            tonic::Status,
        >;
        /// Retrieve an object / 检索对象
        async fn get_object(
            &self,
            request: tonic::Request<super::GetObjectRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetObjectResponse>,
            tonic::Status,
        >;
        /// List objects / 列出对象
        async fn list_objects(
            &self,
            request: tonic::Request<super::ListObjectsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ListObjectsResponse>,
            tonic::Status,
        >;
        /// Add object reference / 添加对象引用
        async fn add_object_ref(
            &self,
            request: tonic::Request<super::AddObjectRefRequest>,
        ) -> std::result::Result<
            tonic::Response<super::AddObjectRefResponse>,
            tonic::Status,
        >;
        /// Remove object reference / 移除对象引用
        async fn remove_object_ref(
            &self,
            request: tonic::Request<super::RemoveObjectRefRequest>,
        ) -> std::result::Result<
            tonic::Response<super::RemoveObjectRefResponse>,
            tonic::Status,
        >;
        /// Pin object (prevent deletion) / 固定对象（防止删除）
        async fn pin_object(
            &self,
            request: tonic::Request<super::PinObjectRequest>,
        ) -> std::result::Result<
            tonic::Response<super::PinObjectResponse>,
            tonic::Status,
        >;
        /// Unpin object / 取消固定对象
        async fn unpin_object(
            &self,
            request: tonic::Request<super::UnpinObjectRequest>,
        ) -> std::result::Result<
            tonic::Response<super::UnpinObjectResponse>,
            tonic::Status,
        >;
        /// Delete object / 删除对象
        async fn delete_object(
            &self,
            request: tonic::Request<super::DeleteObjectRequest>,
        ) -> std::result::Result<
            tonic::Response<super::DeleteObjectResponse>,
            tonic::Status,
        >;
    }
    /// Object service definition / 对象服务定义
    #[derive(Debug)]
    pub struct ObjectServiceServer<T> {
        inner: Arc<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    impl<T> ObjectServiceServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for ObjectServiceServer<T>
    where
        T: ObjectService,
        B: Body + std::marker::Send + 'static,
        B::Error: Into<StdError> + std::marker::Send + 'static,
    {
        type Response = http::Response<tonic::body::BoxBody>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            match req.uri().path() {
                "/spearlet.ObjectService/PutObject" => {
                    #[allow(non_camel_case_types)]
                    struct PutObjectSvc<T: ObjectService>(pub Arc<T>);
                    impl<
                        T: ObjectService,
                    > tonic::server::UnaryService<super::PutObjectRequest>
                    for PutObjectSvc<T> {
                        type Response = super::PutObjectResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::PutObjectRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ObjectService>::put_object(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = PutObjectSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/spearlet.ObjectService/GetObject" => {
                    #[allow(non_camel_case_types)]
                    struct GetObjectSvc<T: ObjectService>(pub Arc<T>);
                    impl<
                        T: ObjectService,
                    > tonic::server::UnaryService<super::GetObjectRequest>
                    for GetObjectSvc<T> {
                        type Response = super::GetObjectResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetObjectRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ObjectService>::get_object(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetObjectSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/spearlet.ObjectService/ListObjects" => {
                    #[allow(non_camel_case_types)]
                    struct ListObjectsSvc<T: ObjectService>(pub Arc<T>);
                    impl<
                        T: ObjectService,
                    > tonic::server::UnaryService<super::ListObjectsRequest>
                    for ListObjectsSvc<T> {
                        type Response = super::ListObjectsResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::ListObjectsRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ObjectService>::list_objects(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ListObjectsSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/spearlet.ObjectService/AddObjectRef" => {
                    #[allow(non_camel_case_types)]
                    struct AddObjectRefSvc<T: ObjectService>(pub Arc<T>);
                    impl<
                        T: ObjectService,
                    > tonic::server::UnaryService<super::AddObjectRefRequest>
                    for AddObjectRefSvc<T> {
                        type Response = super::AddObjectRefResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::AddObjectRefRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ObjectService>::add_object_ref(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = AddObjectRefSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/spearlet.ObjectService/RemoveObjectRef" => {
                    #[allow(non_camel_case_types)]
                    struct RemoveObjectRefSvc<T: ObjectService>(pub Arc<T>);
                    impl<
                        T: ObjectService,
                    > tonic::server::UnaryService<super::RemoveObjectRefRequest>
                    for RemoveObjectRefSvc<T> {
                        type Response = super::RemoveObjectRefResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::RemoveObjectRefRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ObjectService>::remove_object_ref(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = RemoveObjectRefSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/spearlet.ObjectService/PinObject" => {
                    #[allow(non_camel_case_types)]
                    struct PinObjectSvc<T: ObjectService>(pub Arc<T>);
                    impl<
                        T: ObjectService,
                    > tonic::server::UnaryService<super::PinObjectRequest>
                    for PinObjectSvc<T> {
                        type Response = super::PinObjectResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::PinObjectRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ObjectService>::pin_object(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = PinObjectSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/spearlet.ObjectService/UnpinObject" => {
                    #[allow(non_camel_case_types)]
                    struct UnpinObjectSvc<T: ObjectService>(pub Arc<T>);
                    impl<
                        T: ObjectService,
                    > tonic::server::UnaryService<super::UnpinObjectRequest>
                    for UnpinObjectSvc<T> {
                        type Response = super::UnpinObjectResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::UnpinObjectRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ObjectService>::unpin_object(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = UnpinObjectSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/spearlet.ObjectService/DeleteObject" => {
                    #[allow(non_camel_case_types)]
                    struct DeleteObjectSvc<T: ObjectService>(pub Arc<T>);
                    impl<
                        T: ObjectService,
                    > tonic::server::UnaryService<super::DeleteObjectRequest>
                    for DeleteObjectSvc<T> {
                        type Response = super::DeleteObjectResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::DeleteObjectRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ObjectService>::delete_object(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = DeleteObjectSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        let mut response = http::Response::new(empty_body());
                        let headers = response.headers_mut();
                        headers
                            .insert(
                                tonic::Status::GRPC_STATUS,
                                (tonic::Code::Unimplemented as i32).into(),
                            );
                        headers
                            .insert(
                                http::header::CONTENT_TYPE,
                                tonic::metadata::GRPC_CONTENT_TYPE,
                            );
                        Ok(response)
                    })
                }
            }
        }
    }
    impl<T> Clone for ObjectServiceServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    /// Generated gRPC service name
    pub const SERVICE_NAME: &str = "spearlet.ObjectService";
    impl<T> tonic::server::NamedService for ObjectServiceServer<T> {
        const NAME: &'static str = SERVICE_NAME;
    }
}
